Pass
{
    Name "VTFeedback"
    Tags{"LightMode" = "VTFeedback"}

    // Material options generated by graph
${Culling}
${ZTest}
    HLSLPROGRAM
    // Required to compile gles 2.0 with standard srp library
    #pragma prefer_hlslcc gles
    #pragma exclude_renderers d3d11_9x
    #pragma target 2.0

    //--------------------------------------
    // GPU Instancing
    #pragma multi_compile_instancing

    #pragma vertex vert
    #pragma fragment frag

    #define RESOLVE_SCALE_OVERRIDE VT_ResolveConstantPatch

    //Pragmas generated by graph
${Pragmas}

    // Defines generated by graph
${Defines}
    #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
    #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
    #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
    #include "Packages/com.unity.render-pipelines.lightweight/Shaders/UnlitInput.hlsl"

${Graph}
    struct VertexOutput
    {
        float2 uv           : TEXCOORD0;
        float4 clipPos      : SV_POSITION;
        // Interpolators defined by graph
${VertexOutputStruct}
        UNITY_VERTEX_INPUT_INSTANCE_ID
        UNITY_VERTEX_OUTPUT_STEREO
    };

    VertexOutput vert(GraphVertexInput v)
    {
        VertexOutput o = (VertexOutput)0;
        UNITY_SETUP_INSTANCE_ID(v);
        UNITY_TRANSFER_INSTANCE_ID(v, o);
        UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        // Vertex transformations performed by graph
${VertexShader}
        VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

        // Vertex description inputs defined by graph
${VertexShaderDescriptionInputs}
        VertexDescription vd = PopulateVertexData(vdi);
        v.vertex.xyz = vd.Position;

        // Vertex shader outputs defined by graph
${VertexShaderOutputs}
        o.clipPos = TransformObjectToHClip(v.vertex.xyz);
        return o;
    }

    half4 frag(VertexOutput IN ${FaceSign}) : SV_TARGET
    {
        UNITY_SETUP_INSTANCE_ID(IN);
		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
        float4 PixelCoordinate = IN.clipPos;

        // Pixel transformations performed by graph
${PixelShader}
        SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

		// Surface description inputs defined by graph
${PixelShaderSurfaceInputs}
        SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

		float3 Albedo = float3(0.5, 0.5, 0.5);
		float3 Specular = float3(0, 0, 0);
		float Metallic = 1;
		float3 Normal = float3(0, 0, 1);
		float3 Emission = 0;
		float Smoothness = 0.5;
		float Occlusion = 1;
		float Alpha = 1;
		float AlphaClipThreshold = 0;
        float4 VTFeedback = float4(1, 1, 1, 1);

		// Surface description remap performed by graph
${PixelShaderSurfaceRemap}

 #if _AlphaClip
		clip(Alpha - AlphaClipThreshold);
#endif
        return VTFeedback;
    }
    ENDHLSL
}
